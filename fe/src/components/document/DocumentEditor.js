import React, { useState } from 'react';
import '../../styles/documentEditor.css';

function DocumentEditor({ documentType = 'single-template', onBack, onNext, onSaveDraft, hideFooter = false }) {
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages] = useState(46);
    const [selectedComponent, setSelectedComponent] = useState(null);
    const [documentComponents, setDocumentComponents] = useState([]);
    const [showSignatureDropdown, setShowSignatureDropdown] = useState(false);
    const [hoveredComponentId, setHoveredComponentId] = useState(null);
    const [editingComponentId, setEditingComponentId] = useState(null);
    const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0 });

    // D·ªØ li·ªáu m·∫´u cho c√°c th√†nh ph·∫ßn c√≥ th·ªÉ k√©o th·∫£
    const availableComponents = [
        {
            id: 'document-number',
            name: 'S·ªê T√ÄI LI·ªÜU',
            icon: 'üìÑ',
            type: 'field'
        },
        {
            id: 'text',
            name: 'TEXT',
            icon: 'T',
            type: 'field'
        },
        {
            id: 'image-signature',
            name: 'CH·ªÆ K√ù ·∫¢NH',
            icon: 'üë§',
            type: 'signature'
        },
        {
            id: 'digital-signature',
            name: 'CH·ªÆ K√ù S·ªê',
            icon: '‚àû',
            type: 'signature',
            hasDropdown: true
        }
    ];

    // C√°c t√πy ch·ªçn ch·ªØ k√Ω s·ªë
    const signatureOptions = [
        {
            id: 'signature-with-seal-info',
            name: 'Ch·ªØ k√Ω c√≥ con d·∫•u v√† th√¥ng tin',
            icon: 'seal-info',
            description: 'Con d·∫•u/ ch·ªØ k√Ω + Th√¥ng tin ch·ªØ k√Ω s·ªë'
        },
        {
            id: 'signature-seal-only',
            name: 'Ch·ªâ c√≥ con d·∫•u/ ch·ªØ k√Ω',
            icon: 'seal-only',
            description: 'Con d·∫•u/ ch·ªØ k√Ω'
        },
        {
            id: 'signature-info-only',
            name: 'Ch·ªâ c√≥ th√¥ng tin',
            icon: 'info-only',
            description: 'Th√¥ng tin ch·ªØ k√Ω s·ªë'
        }
    ];

    // Thu·ªôc t√≠nh c·ªßa component ƒë∆∞·ª£c ch·ªçn
    const [componentProperties, setComponentProperties] = useState({
        signer: '',
        font: 'Times New Roman',
        size: 13,
        x: 0,
        y: 0,
        width: 0,
        height: 0
    });

    const handlePageChange = (page) => {
        if (page >= 1 && page <= totalPages) {
            setCurrentPage(page);
        }
    };

    const handleComponentSelect = (component) => {
        setSelectedComponent(component);
        setEditingComponentId(null); // Reset editing mode
        // Reset properties khi ch·ªçn component m·ªõi
        setComponentProperties({
            signer: '',
            font: 'Times New Roman',
            size: 13,
            x: 0,
            y: 0,
            width: 0,
            height: 0
        });
    };

    const handlePropertyChange = (property, value) => {
        setComponentProperties(prev => ({
            ...prev,
            [property]: value
        }));
    };

    const handleAddComponent = () => {
        if (selectedComponent && componentProperties.signer) {
            // ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu
            const width = Math.max(componentProperties.width || 100, 50);
            const height = Math.max(componentProperties.height || 30, 20);
            
            const newComponent = {
                id: Date.now(),
                type: selectedComponent.id,
                name: selectedComponent.name,
                properties: { 
                    ...componentProperties,
                    width: width,
                    height: height
                }
            };
            setDocumentComponents(prev => [...prev, newComponent]);
        }
    };

    const handleRemoveComponent = (componentId) => {
        setDocumentComponents(prev => prev.filter(comp => comp.id !== componentId));
    };

    const handleComponentClick = (component) => {
        setEditingComponentId(component.id);
        setComponentProperties(component.properties);
        setSelectedComponent({
            id: component.type,
            name: component.name,
            icon: availableComponents.find(comp => comp.id === component.type)?.icon || 'üìÑ'
        });
    };

    const handleUpdateComponent = () => {
        if (editingComponentId) {
            setDocumentComponents(prev => prev.map(comp => 
                comp.id === editingComponentId 
                    ? { ...comp, properties: { ...componentProperties } }
                    : comp
            ));
        }
    };

    const handleSignatureOptionClick = (option) => {
        if (selectedComponent) {
            const newComponent = {
                id: Date.now(),
                type: selectedComponent.id,
                name: `${selectedComponent.name} - ${option.name}`,
                signatureType: option.id,
                properties: { 
                    ...componentProperties,
                    width: Math.max(componentProperties.width || 100, 50),
                    height: Math.max(componentProperties.height || 30, 20)
                }
            };
            setDocumentComponents(prev => [...prev, newComponent]);
            setShowSignatureDropdown(false);
        }
    };

    return (
        <div className="document-editor-container">
            <div className="editor-wrapper">
                {/* Header v·ªõi radio buttons v√† pagination */}
                <div className="editor-header">
                    <div className="document-type-selection">
                        <label className="radio-option">
                            <input 
                                type="radio" 
                                name="documentType" 
                                value="single-template" 
                                checked={documentType === 'single-template'}
                                readOnly
                            />
                            T√†i li·ªáu ƒë∆°n l·∫ª theo m·∫´u
                        </label>
                        <label className="radio-option">
                            <input 
                                type="radio" 
                                name="documentType" 
                                value="single-no-template"
                                checked={documentType === 'single-no-template'}
                                readOnly
                            />
                            T√†i li·ªáu ƒë∆°n l·∫ª kh√¥ng theo m·∫´u
                        </label>
                        <label className="radio-option">
                            <input 
                                type="radio" 
                                name="documentType" 
                                value="batch"
                                checked={documentType === 'batch'}
                                readOnly
                            />
                            T√†i li·ªáu theo l√¥
                        </label>
                    </div>
                    
                    <div className="pagination-controls">
                        <button 
                            className="page-btn" 
                            onClick={() => handlePageChange(1)}
                            disabled={currentPage === 1}
                        >
                            ¬´¬´
                        </button>
                        <button 
                            className="page-btn" 
                            onClick={() => handlePageChange(currentPage - 1)}
                            disabled={currentPage === 1}
                        >
                            ¬´
                        </button>
                        <span className="page-info">{currentPage} / {totalPages}</span>
                        <button 
                            className="page-btn" 
                            onClick={() => handlePageChange(currentPage + 1)}
                            disabled={currentPage === totalPages}
                        >
                            ¬ª
                        </button>
                        <button 
                            className="page-btn" 
                            onClick={() => handlePageChange(totalPages)}
                            disabled={currentPage === totalPages}
                        >
                            ¬ª¬ª
                        </button>
                    </div>
                </div>

                <div className="editor-content">
                    {/* Left Sidebar - Components */}
                    <div className="components-sidebar">
                        <h3 className="sidebar-title">TH√ÄNH PH·∫¶N</h3>
                        <p className="sidebar-instruction">
                            K√©o th·∫£ c√°c tr∆∞·ªùng th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ th√™m √¥ nh·∫≠p ho·∫∑c √¥ k√Ω v√†o t√†i li·ªáu
                        </p>
                        
                        <div className="components-list">
                            {availableComponents.map(component => (
                                <div key={component.id} className="component-wrapper">
                                    <button
                                        className={`component-item ${selectedComponent?.id === component.id ? 'selected' : ''}`}
                                        onClick={() => handleComponentSelect(component)}
                                        onMouseEnter={(e) => {
                                            if (component.hasDropdown) {
                                                const rect = e.target.getBoundingClientRect();
                                                setDropdownPosition({
                                                    top: rect.top,
                                                    left: rect.right + 8
                                                });
                                                setShowSignatureDropdown(true);
                                            }
                                        }}
                                        onMouseLeave={() => component.hasDropdown && setShowSignatureDropdown(false)}
                                    >
                                        <span className="component-icon">{component.icon}</span>
                                        <span className="component-name">{component.name}</span>
                                        {component.hasDropdown && <span className="dropdown-arrow">‚Ä∫</span>}
                                    </button>
                                    
                                    {/* Dropdown cho ch·ªØ k√Ω s·ªë */}
                                    {component.hasDropdown && showSignatureDropdown && (
                                        <div 
                                            className="signature-dropdown"
                                            style={{
                                                top: `${dropdownPosition.top}px`,
                                                left: `${dropdownPosition.left}px`
                                            }}
                                            onMouseEnter={() => setShowSignatureDropdown(true)}
                                            onMouseLeave={() => setShowSignatureDropdown(false)}
                                        >
                                            {signatureOptions.map(option => (
                                                <div 
                                                    key={option.id} 
                                                    className="signature-option"
                                                    onClick={() => handleSignatureOptionClick(option)}
                                                >
                                                    <div className="signature-preview">
                                                        {option.icon === 'seal-info' && (
                                                            <div className="preview-boxes">
                                                                <div className="preview-box">
                                                                    <div className="preview-icon">‚úçÔ∏è</div>
                                                                    <div className="preview-text">Con d·∫•u/ ch·ªØ k√Ω</div>
                                                                </div>
                                                                <div className="preview-box">
                                                                    <div className="preview-icon">üìã</div>
                                                                    <div className="preview-text">Th√¥ng tin ch·ªØ k√Ω s·ªë</div>
                                                                </div>
                                                            </div>
                                                        )}
                                                        {option.icon === 'seal-only' && (
                                                            <div className="preview-boxes">
                                                                <div className="preview-box">
                                                                    <div className="preview-icon">‚úçÔ∏è</div>
                                                                    <div className="preview-text">Con d·∫•u/ ch·ªØ k√Ω</div>
                                                                </div>
                                                            </div>
                                                        )}
                                                        {option.icon === 'info-only' && (
                                                            <div className="preview-boxes">
                                                                <div className="preview-box">
                                                                    <div className="preview-icon">üìã</div>
                                                                    <div className="preview-text">Th√¥ng tin ch·ªØ k√Ω s·ªë</div>
                                                                </div>
                                                            </div>
                                                        )}
                                                    </div>
                                                    <div className="signature-label">{option.name}</div>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Main Content - Document */}
                    <div className="document-content">
                        <div className="document-page">
                            <div className="document-header">
                                <h1>I. ƒêƒÉng nh·∫≠p h·ªá th·ªëng</h1>
                                <h2>1.1. ƒêƒÉng k√Ω</h2>
                            </div>
                            
                            <div className="document-table">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>T√™n ch·ª©c nƒÉng</th>
                                            <th>ƒêƒÉng k√Ω</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>ƒêƒÉng k√Ω</td>
                                            <td>
                                                <div className="function-description">
                                                    <p><strong>M√¥ t·∫£:</strong> Cho ph√©p ng∆∞·ªùi d√πng ƒëƒÉng k√Ω s·ª≠ d·ª•ng h·ªá th·ªëng. Th√¥ng tin ƒëƒÉng k√Ω bao g·ªìm:</p>
                                                    <ul>
                                                        <li>Email ƒëƒÉng k√Ω(*)</li>
                                                        <li>M√£ s·ªë thu·∫ø / CCCD / CMT (*)</li>
                                                        <li>S·ªë ƒëi·ªán tho·∫°i (*)</li>
                                                        <li>M·∫≠t kh·∫©u (*)</li>
                                                        <li>H·ªç v√† t√™n (*)</li>
                                                    </ul>
                                                    
                                                    <p><strong>T√°c nh√¢n:</strong> Ng∆∞·ªùi d√πng ƒëƒÉng k√Ω s·ª≠ d·ª•ng h·ªá th·ªëng</p>
                                                    
                                                    <p><strong>ƒêi·ªÅu ki·ªán tr∆∞·ªõc:</strong> Truy c·∫≠p v√†o trang web eContract v√† ch·ªçn ƒëƒÉng k√Ω</p>
                                                    
                                                    <p><strong>ƒêi·ªÅu ki·ªán sau:</strong> Ng∆∞·ªùi d√πng g·ª≠i th√¥ng tin ƒëƒÉng k√Ω s·ª≠ d·ª•ng h·ªá th·ªëng th√†nh c√¥ng. H·ªá th·ªëng s·∫Ω g·ª≠i th√¥ng b√°o ƒë·∫øn cho trang qu·∫£n tr·ªã h·ªá th·ªëng, th√¥ng tin t·ªï ch·ª©c ƒë∆∞·ª£c th√™m m·ªõi v√†o danh s√°ch t·ªï ch·ª©c s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa trang qu·∫£n tr·ªã v√† c√≥ tr·∫°ng th√°i "Ch∆∞a k√≠ch ho·∫°t"</p>
                                                    
                                                    <p><strong>Ngo·∫°i l·ªá 1:</strong> Ng∆∞·ªùi d√πng nh·∫≠p kh√¥ng ƒë·ªß c√°c tr∆∞·ªùng th√¥ng tin b·∫Øt bu·ªôc. H·ªá th·ªëng th√¥ng b√°o t·∫°i tr∆∞·ªùng th√¥ng tin ƒë√≥: "ƒê√¢y l√† tr∆∞·ªùng b·∫Øt bu·ªôc nh·∫≠p"</p>
                                                    
                                                    <p><strong>Ngo·∫°i l·ªá 2:</strong> Ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin email ƒë√£ ƒë∆∞·ª£c c·∫•p t√†i kho·∫£n tr√™n h·ªá th·ªëng. H·ªá th·ªëng th√¥ng b√°o: "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i tr√™n h·ªá th·ªëng"</p>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>

                            {/* Document Components */}
                            {documentComponents.map(component => (
                                <div 
                                    key={component.id} 
                                    className={`document-component ${editingComponentId === component.id ? 'editing' : ''}`}
                                    style={{
                                        position: 'absolute',
                                        left: `${component.properties.x}px`,
                                        top: `${component.properties.y}px`,
                                        width: `${component.properties.width}px`,
                                        height: `${component.properties.height}px`,
                                        fontSize: `${component.properties.size}px`,
                                        fontFamily: component.properties.font
                                    }}
                                    onMouseEnter={() => setHoveredComponentId(component.id)}
                                    onMouseLeave={() => setHoveredComponentId(null)}
                                    onClick={() => handleComponentClick(component)}
                                >
                                    <div className="component-content">
                                        {component.type === 'text' && component.properties.fieldName 
                                            ? `[${component.properties.fieldName}]` 
                                            : component.signatureType 
                                                ? `[${component.name}]`
                                                : `[${component.name}]`
                                        }
                                    </div>
                                    {hoveredComponentId === component.id && (
                                        <button 
                                            className="remove-component-btn"
                                            onClick={() => handleRemoveComponent(component.id)}
                                            title="X√≥a component"
                                        >
                                            √ó
                                        </button>
                                    )}
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Right Sidebar - Properties */}
                    <div className="properties-sidebar">
                        <h3 className="sidebar-title">THU·ªòC T√çNH</h3>
                        
                        {selectedComponent ? (
                            <div className="properties-form">
                                {/* Properties cho S·ªê T√ÄI LI·ªÜU */}
                                {selectedComponent.id === 'document-number' && (
                                    <>
                                        <div className="property-group">
                                            <label className="property-label">
                                                NG∆Ø·ªúI NH·∫¨P: <span className="required">*</span>
                                            </label>
                                            <select 
                                                className="property-input"
                                                value={componentProperties.signer}
                                                onChange={(e) => handlePropertyChange('signer', e.target.value)}
                                            >
                                                <option value="">Ch·ªçn ng∆∞·ªùi nh·∫≠p</option>
                                                <option value="user1">Nguy·ªÖn VƒÉn A</option>
                                                <option value="user2">Tr·∫ßn Th·ªã B</option>
                                                <option value="user3">L√™ VƒÉn C</option>
                                            </select>
                                        </div>
                                    </>
                                )}

                                {/* Properties cho TEXT */}
                                {selectedComponent.id === 'text' && (
                                    <>
                                        <div className="property-group">
                                            <label className="property-label">
                                                T√äN TR∆Ø·ªúNG: <span className="required">*</span>
                                            </label>
                                            <input 
                                                type="text"
                                                className="property-input"
                                                value={componentProperties.fieldName || ''}
                                                onChange={(e) => handlePropertyChange('fieldName', e.target.value)}
                                                placeholder="Nh·∫≠p t√™n tr∆∞·ªùng"
                                            />
                                        </div>
                                        <div className="property-group">
                                            <label className="property-label">
                                                NG∆Ø·ªúI NH·∫¨P: <span className="required">*</span>
                                            </label>
                                            <select 
                                                className="property-input"
                                                value={componentProperties.signer}
                                                onChange={(e) => handlePropertyChange('signer', e.target.value)}
                                            >
                                                <option value="">Ch·ªçn ng∆∞·ªùi nh·∫≠p</option>
                                                <option value="user1">Nguy·ªÖn VƒÉn A</option>
                                                <option value="user2">Tr·∫ßn Th·ªã B</option>
                                                <option value="user3">L√™ VƒÉn C</option>
                                            </select>
                                        </div>
                                    </>
                                )}

                                {/* Properties cho CH·ªÆ K√ù ·∫¢NH v√† CH·ªÆ K√ù S·ªê */}
                                {(selectedComponent.id === 'image-signature' || selectedComponent.id === 'digital-signature') && (
                                    <div className="property-group">
                                        <label className="property-label">
                                            NG∆Ø·ªúI K√ù: <span className="required">*</span>
                                        </label>
                                        <select 
                                            className="property-input"
                                            value={componentProperties.signer}
                                            onChange={(e) => handlePropertyChange('signer', e.target.value)}
                                        >
                                            <option value="">Ch·ªçn ng∆∞·ªùi k√Ω</option>
                                            <option value="user1">Nguy·ªÖn VƒÉn A</option>
                                            <option value="user2">Tr·∫ßn Th·ªã B</option>
                                            <option value="user3">L√™ VƒÉn C</option>
                                        </select>
                                    </div>
                                )}

                                {/* Properties chung cho t·∫•t c·∫£ */}
                                <div className="property-group">
                                    <label className="property-label">FONT:</label>
                                    <select 
                                        className="property-input"
                                        value={componentProperties.font}
                                        onChange={(e) => handlePropertyChange('font', e.target.value)}
                                    >
                                        <option value="Times New Roman">Times New Roman</option>
                                        <option value="Arial">Arial</option>
                                        <option value="Calibri">Calibri</option>
                                        <option value="Tahoma">Tahoma</option>
                                    </select>
                                </div>

                                <div className="property-group">
                                    <label className="property-label">SIZE:</label>
                                    <input 
                                        type="number"
                                        className="property-input"
                                        value={componentProperties.size}
                                        onChange={(e) => handlePropertyChange('size', parseInt(e.target.value))}
                                    />
                                </div>

                                <div className="property-group">
                                    <label className="property-label">V·ªä TR√ç V√Ä K√çCH TH∆Ø·ªöC:</label>
                                    <div className="position-inputs">
                                        <div className="input-row">
                                            <label>X:</label>
                                            <input 
                                                type="number"
                                                value={componentProperties.x}
                                                onChange={(e) => handlePropertyChange('x', parseInt(e.target.value))}
                                            />
                                        </div>
                                        <div className="input-row">
                                            <label>Y:</label>
                                            <input 
                                                type="number"
                                                value={componentProperties.y}
                                                onChange={(e) => handlePropertyChange('y', parseInt(e.target.value))}
                                            />
                                        </div>
                                        <div className="input-row">
                                            <label>CHI·ªÄU D√ÄI:</label>
                                            <input 
                                                type="number"
                                                value={componentProperties.height}
                                                onChange={(e) => handlePropertyChange('height', parseInt(e.target.value))}
                                            />
                                        </div>
                                        <div className="input-row">
                                            <label>CHI·ªÄU R·ªòNG:</label>
                                            <input 
                                                type="number"
                                                value={componentProperties.width}
                                                onChange={(e) => handlePropertyChange('width', parseInt(e.target.value))}
                                            />
                                        </div>
                                    </div>
                                </div>

                                <button 
                                    className="add-component-btn"
                                    onClick={editingComponentId ? handleUpdateComponent : handleAddComponent}
                                    disabled={
                                        !componentProperties.signer || 
                                        (selectedComponent.id === 'text' && !componentProperties.fieldName)
                                    }
                                >
                                    {editingComponentId ? 'C·∫≠p nh·∫≠t component' : 'Th√™m v√†o t√†i li·ªáu'}
                                </button>
                            </div>
                        ) : (
                            <div className="no-selection">
                                <p>Ch·ªçn m·ªôt th√†nh ph·∫ßn ƒë·ªÉ c·∫•u h√¨nh thu·ªôc t√≠nh</p>
                            </div>
                        )}
                    </div>
                </div>

                {/* Footer v·ªõi c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng - ch·ªâ hi·ªÉn th·ªã khi kh√¥ng ·∫©n */}
                {!hideFooter && (
                    <div className="editor-footer">
                        <button className="back-btn" onClick={onBack}>Quay l·∫°i</button>
                        <div className="footer-right">
                            <button className="save-draft-btn" onClick={onSaveDraft}>L∆∞u nh√°p</button>
                            <button className="next-btn" onClick={onNext}>Ti·∫øp theo</button>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}

export default DocumentEditor;
